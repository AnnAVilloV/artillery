/* autogenerated by Processing revision 1289 on 2023-02-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class artillery extends PApplet {

//display all kinds of parameters (may need antankInitX1other class?)
//generate the 2 tanks and their shells, blocks(terrain)

final int tank_WIDTH_PROPORTION = 20,
          tank_HEIGHT_PROPORTION = 20,
          tank_INIT_X_PROPORTION = 10,
          tank_INCREMENT_PROPORTION = 100 ;



tank tank1;
tank tank2;

boolean moveLeft1 = false;
boolean moveRight1 = false;

public void setup() {
/* size commented out by preprocessor */ ; 
  // initialise the tanks. 
    int tankWidth = displayWidth/tank_WIDTH_PROPORTION ;
    int tankHeight = displayHeight/tank_HEIGHT_PROPORTION ;
    int tankIncrement = displayWidth/tank_INCREMENT_PROPORTION ;    
    int tankInitX1 = displayWidth/tank_INIT_X_PROPORTION - tankWidth/2 ;
    int tankInitX2 = displayWidth- displayWidth/tank_INIT_X_PROPORTION - tankWidth/2;
    int tankInitY1 = displayHeight - tankHeight ;
    int tankInitY2 = displayHeight - tankHeight ;

    tank1 = new tank(tankInitX1, tankInitY1, tankWidth, tankHeight, tankIncrement);
    tank2 = new tank(tankInitX2, tankInitY2, tankWidth, tankHeight, tankIncrement);

    int color1 = color(237, 127, 167);
    int color2 = color(237, 188, 127);
    tank1.setColor(color1);
    tank2.setColor(color2);

}

public void draw() {
    background(0xFF2D2F8B) ;
    
    if(moveLeft1){
      tank1.moveLeft();
    }else if(moveLeft1){
      tank1.moveRight();
    }
    tank1.draw();
    
    
    
    
    tank2.draw();
    
    
}

public void keyPressed(){
  if (key == CODED) {
     switch (keyCode) {
       case LEFT :
         moveLeft1 = true ;
         break ;
       case RIGHT :
         moveRight1 = true ;
         break ;
     }
  }
}

public void keyReleased() {
      if (key == CODED) {
     switch (keyCode) {
       case LEFT :
         moveLeft1 = false ;
         break ;
       case RIGHT :
         moveRight1 = false ;
         break ;
     }
}
final class block {
    //blocks form terrain.

    //limited random x & y;
    //final width & height;

    //destroy function, when being hitted. 
}
final class shell {
    PVector position;
    int shellWidth, shellHeight;
    int moveIncrement;

    shell(int x, int y, int shellWidth, int shellHeight){
        position = new PVector(x, y);
        this.shellWidth = shellWidth;
        this.shellHeight = shellHeight;
        this.moveIncrement = moveIncrement;
    }

    public void reset(int x, int y) {
        position.x = x ;
        position.y = y ;
    }

    public void draw(){

    }

    //move function, consider gravity and fraction

    //hit function, collision detect


}
final class tank {
    PVector position ;
    int tankWidth, tankHeight ;
    int moveIncrement ;
    int tankColor = color(255, 255, 255);



    
    

    tank(int x, int y, int tankWidth, int tankHeight, int moveIncrement){
        position = new PVector(x,y);
        this.tankWidth = tankWidth;
        this.tankHeight = tankHeight;
        this.moveIncrement = moveIncrement ;
    }

    //getter
    public int getX() {return (int)position.x ;}
    public int getY() {return (int)position.y ;}

    //setter
    public void setColor(int c){
        this.tankColor = c;
    }

    public void draw(){
        fill(tankColor);
        
        rect(position.x, position.y, tankWidth, tankHeight) ;
    }

    // CAREFUL:没有处理地形碰撞
    public void moveLeft() {
        position.x -= moveIncrement ;
        if (position.x < 0) position.x = 0 ;
    }
    public void moveRight() {
        position.x += moveIncrement ;
        if (position.x > displayWidth-tankWidth) 
        position.x = displayWidth-tankWidth ;
    }  

}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "artillery" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
